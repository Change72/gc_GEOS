// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: treeNode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_treeNode_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_treeNode_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_treeNode_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_treeNode_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_treeNode_2eproto;
class Tree;
struct TreeDefaultTypeInternal;
extern TreeDefaultTypeInternal _Tree_default_instance_;
class TreeNode;
struct TreeNodeDefaultTypeInternal;
extern TreeNodeDefaultTypeInternal _TreeNode_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::Tree* Arena::CreateMaybeMessage<::Tree>(Arena*);
template <>
::TreeNode* Arena::CreateMaybeMessage<::TreeNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE


// ===================================================================


// -------------------------------------------------------------------

class TreeNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TreeNode) */ {
 public:
  inline TreeNode() : TreeNode(nullptr) {}
  ~TreeNode() override;
  explicit PROTOBUF_CONSTEXPR TreeNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TreeNode(const TreeNode& from);
  TreeNode(TreeNode&& from) noexcept
    : TreeNode() {
    *this = ::std::move(from);
  }

  inline TreeNode& operator=(const TreeNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeNode& operator=(TreeNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TreeNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const TreeNode* internal_default_instance() {
    return reinterpret_cast<const TreeNode*>(
               &_TreeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TreeNode& a, TreeNode& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreeNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TreeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TreeNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TreeNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TreeNode& from) {
    TreeNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TreeNode";
  }
  protected:
  explicit TreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kChildSizeFieldNumber = 2,
    kMinxFieldNumber = 3,
    kMaxxFieldNumber = 4,
    kMinyFieldNumber = 5,
    kMaxyFieldNumber = 6,
    kMinzFieldNumber = 7,
    kMaxzFieldNumber = 8,
    kSliceIdFieldNumber = 9,
  };
  // int32 level = 1;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // int32 childSize = 2;
  void clear_childsize() ;
  ::int32_t childsize() const;
  void set_childsize(::int32_t value);

  private:
  ::int32_t _internal_childsize() const;
  void _internal_set_childsize(::int32_t value);

  public:
  // double minx = 3;
  void clear_minx() ;
  double minx() const;
  void set_minx(double value);

  private:
  double _internal_minx() const;
  void _internal_set_minx(double value);

  public:
  // double maxx = 4;
  void clear_maxx() ;
  double maxx() const;
  void set_maxx(double value);

  private:
  double _internal_maxx() const;
  void _internal_set_maxx(double value);

  public:
  // double miny = 5;
  void clear_miny() ;
  double miny() const;
  void set_miny(double value);

  private:
  double _internal_miny() const;
  void _internal_set_miny(double value);

  public:
  // double maxy = 6;
  void clear_maxy() ;
  double maxy() const;
  void set_maxy(double value);

  private:
  double _internal_maxy() const;
  void _internal_set_maxy(double value);

  public:
  // double minz = 7;
  void clear_minz() ;
  double minz() const;
  void set_minz(double value);

  private:
  double _internal_minz() const;
  void _internal_set_minz(double value);

  public:
  // double maxz = 8;
  void clear_maxz() ;
  double maxz() const;
  void set_maxz(double value);

  private:
  double _internal_maxz() const;
  void _internal_set_maxz(double value);

  public:
  // int32 slice_id = 9;
  void clear_slice_id() ;
  ::int32_t slice_id() const;
  void set_slice_id(::int32_t value);

  private:
  ::int32_t _internal_slice_id() const;
  void _internal_set_slice_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TreeNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t level_;
    ::int32_t childsize_;
    double minx_;
    double maxx_;
    double miny_;
    double maxy_;
    double minz_;
    double maxz_;
    ::int32_t slice_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_treeNode_2eproto;
};// -------------------------------------------------------------------

class Tree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tree) */ {
 public:
  inline Tree() : Tree(nullptr) {}
  ~Tree() override;
  explicit PROTOBUF_CONSTEXPR Tree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tree(const Tree& from);
  Tree(Tree&& from) noexcept
    : Tree() {
    *this = ::std::move(from);
  }

  inline Tree& operator=(const Tree& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tree& operator=(Tree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tree& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tree* internal_default_instance() {
    return reinterpret_cast<const Tree*>(
               &_Tree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Tree& a, Tree& b) {
    a.Swap(&b);
  }
  inline void Swap(Tree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tree* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Tree& from) {
    Tree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Tree";
  }
  protected:
  explicit Tree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreeNodesFieldNumber = 1,
  };
  // repeated .TreeNode treeNodes = 1;
  int treenodes_size() const;
  private:
  int _internal_treenodes_size() const;

  public:
  void clear_treenodes() ;
  ::TreeNode* mutable_treenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TreeNode >*
      mutable_treenodes();
  private:
  const ::TreeNode& _internal_treenodes(int index) const;
  ::TreeNode* _internal_add_treenodes();
  public:
  const ::TreeNode& treenodes(int index) const;
  ::TreeNode* add_treenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TreeNode >&
      treenodes() const;
  // @@protoc_insertion_point(class_scope:Tree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TreeNode > treenodes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_treeNode_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TreeNode

// int32 level = 1;
inline void TreeNode::clear_level() {
  _impl_.level_ = 0;
}
inline ::int32_t TreeNode::level() const {
  // @@protoc_insertion_point(field_get:TreeNode.level)
  return _internal_level();
}
inline void TreeNode::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:TreeNode.level)
}
inline ::int32_t TreeNode::_internal_level() const {
  return _impl_.level_;
}
inline void TreeNode::_internal_set_level(::int32_t value) {
  ;
  _impl_.level_ = value;
}

// int32 childSize = 2;
inline void TreeNode::clear_childsize() {
  _impl_.childsize_ = 0;
}
inline ::int32_t TreeNode::childsize() const {
  // @@protoc_insertion_point(field_get:TreeNode.childSize)
  return _internal_childsize();
}
inline void TreeNode::set_childsize(::int32_t value) {
  _internal_set_childsize(value);
  // @@protoc_insertion_point(field_set:TreeNode.childSize)
}
inline ::int32_t TreeNode::_internal_childsize() const {
  return _impl_.childsize_;
}
inline void TreeNode::_internal_set_childsize(::int32_t value) {
  ;
  _impl_.childsize_ = value;
}

// double minx = 3;
inline void TreeNode::clear_minx() {
  _impl_.minx_ = 0;
}
inline double TreeNode::minx() const {
  // @@protoc_insertion_point(field_get:TreeNode.minx)
  return _internal_minx();
}
inline void TreeNode::set_minx(double value) {
  _internal_set_minx(value);
  // @@protoc_insertion_point(field_set:TreeNode.minx)
}
inline double TreeNode::_internal_minx() const {
  return _impl_.minx_;
}
inline void TreeNode::_internal_set_minx(double value) {
  ;
  _impl_.minx_ = value;
}

// double maxx = 4;
inline void TreeNode::clear_maxx() {
  _impl_.maxx_ = 0;
}
inline double TreeNode::maxx() const {
  // @@protoc_insertion_point(field_get:TreeNode.maxx)
  return _internal_maxx();
}
inline void TreeNode::set_maxx(double value) {
  _internal_set_maxx(value);
  // @@protoc_insertion_point(field_set:TreeNode.maxx)
}
inline double TreeNode::_internal_maxx() const {
  return _impl_.maxx_;
}
inline void TreeNode::_internal_set_maxx(double value) {
  ;
  _impl_.maxx_ = value;
}

// double miny = 5;
inline void TreeNode::clear_miny() {
  _impl_.miny_ = 0;
}
inline double TreeNode::miny() const {
  // @@protoc_insertion_point(field_get:TreeNode.miny)
  return _internal_miny();
}
inline void TreeNode::set_miny(double value) {
  _internal_set_miny(value);
  // @@protoc_insertion_point(field_set:TreeNode.miny)
}
inline double TreeNode::_internal_miny() const {
  return _impl_.miny_;
}
inline void TreeNode::_internal_set_miny(double value) {
  ;
  _impl_.miny_ = value;
}

// double maxy = 6;
inline void TreeNode::clear_maxy() {
  _impl_.maxy_ = 0;
}
inline double TreeNode::maxy() const {
  // @@protoc_insertion_point(field_get:TreeNode.maxy)
  return _internal_maxy();
}
inline void TreeNode::set_maxy(double value) {
  _internal_set_maxy(value);
  // @@protoc_insertion_point(field_set:TreeNode.maxy)
}
inline double TreeNode::_internal_maxy() const {
  return _impl_.maxy_;
}
inline void TreeNode::_internal_set_maxy(double value) {
  ;
  _impl_.maxy_ = value;
}

// double minz = 7;
inline void TreeNode::clear_minz() {
  _impl_.minz_ = 0;
}
inline double TreeNode::minz() const {
  // @@protoc_insertion_point(field_get:TreeNode.minz)
  return _internal_minz();
}
inline void TreeNode::set_minz(double value) {
  _internal_set_minz(value);
  // @@protoc_insertion_point(field_set:TreeNode.minz)
}
inline double TreeNode::_internal_minz() const {
  return _impl_.minz_;
}
inline void TreeNode::_internal_set_minz(double value) {
  ;
  _impl_.minz_ = value;
}

// double maxz = 8;
inline void TreeNode::clear_maxz() {
  _impl_.maxz_ = 0;
}
inline double TreeNode::maxz() const {
  // @@protoc_insertion_point(field_get:TreeNode.maxz)
  return _internal_maxz();
}
inline void TreeNode::set_maxz(double value) {
  _internal_set_maxz(value);
  // @@protoc_insertion_point(field_set:TreeNode.maxz)
}
inline double TreeNode::_internal_maxz() const {
  return _impl_.maxz_;
}
inline void TreeNode::_internal_set_maxz(double value) {
  ;
  _impl_.maxz_ = value;
}

// int32 slice_id = 9;
inline void TreeNode::clear_slice_id() {
  _impl_.slice_id_ = 0;
}
inline ::int32_t TreeNode::slice_id() const {
  // @@protoc_insertion_point(field_get:TreeNode.slice_id)
  return _internal_slice_id();
}
inline void TreeNode::set_slice_id(::int32_t value) {
  _internal_set_slice_id(value);
  // @@protoc_insertion_point(field_set:TreeNode.slice_id)
}
inline ::int32_t TreeNode::_internal_slice_id() const {
  return _impl_.slice_id_;
}
inline void TreeNode::_internal_set_slice_id(::int32_t value) {
  ;
  _impl_.slice_id_ = value;
}

// -------------------------------------------------------------------

// Tree

// repeated .TreeNode treeNodes = 1;
inline int Tree::_internal_treenodes_size() const {
  return _impl_.treenodes_.size();
}
inline int Tree::treenodes_size() const {
  return _internal_treenodes_size();
}
inline void Tree::clear_treenodes() {
  _impl_.treenodes_.Clear();
}
inline ::TreeNode* Tree::mutable_treenodes(int index) {
  // @@protoc_insertion_point(field_mutable:Tree.treeNodes)
  return _impl_.treenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TreeNode >*
Tree::mutable_treenodes() {
  // @@protoc_insertion_point(field_mutable_list:Tree.treeNodes)
  return &_impl_.treenodes_;
}
inline const ::TreeNode& Tree::_internal_treenodes(int index) const {
  return _impl_.treenodes_.Get(index);
}
inline const ::TreeNode& Tree::treenodes(int index) const {
  // @@protoc_insertion_point(field_get:Tree.treeNodes)
  return _internal_treenodes(index);
}
inline ::TreeNode* Tree::_internal_add_treenodes() {
  return _impl_.treenodes_.Add();
}
inline ::TreeNode* Tree::add_treenodes() {
  ::TreeNode* _add = _internal_add_treenodes();
  // @@protoc_insertion_point(field_add:Tree.treeNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TreeNode >&
Tree::treenodes() const {
  // @@protoc_insertion_point(field_list:Tree.treeNodes)
  return _impl_.treenodes_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_treeNode_2eproto_2epb_2eh
